#!/bin/bash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$BASE_DIR/config.json"
USERS_FILE="$BASE_DIR/users.json"
CONTAINER_NAME="xray-server"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    command -v docker &>/dev/null || { echo "–û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }
    command -v jq &>/dev/null || { echo "–û—à–∏–±–∫–∞: jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }
    command -v ip &>/dev/null || { echo "–û—à–∏–±–∫–∞: iproute2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ IPv6 –∞–¥—Ä–µ—Å–∞
get_ipv6() {
    SERVER_IPV6=$(ip -6 addr show scope global | grep -v 'fd' | awk '/inet6/{print $2}' | cut -d'/' -f1 | head -n1)
    if [[ -z "$SERVER_IPV6" ]]; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω IPv6 –∞–¥—Ä–µ—Å"
        exit 1
    fi
    echo "$SERVER_IPV6"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
init_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOF
{
  "log": {"loglevel": "warning"},
  "inbounds": [
    {
      "listen": "::",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "www.google.com:443",
          "xver": 0,
          "serverNames": ["www.google.com"],
          "privateKey": "$(docker run --rm teddysun/xray xray x25519 | awk '/Private key:/ {print $3}')",
          "shortIds": ["$(head -c 8 /dev/urandom | xxd -p)"]
        }
      }
    }
  ],
  "outbounds": [{"protocol": "freedom"}]
}
EOF
        echo "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_FILE"
    fi

    [[ ! -f "$USERS_FILE" ]] && echo "{}" > "$USERS_FILE"
}

# –ó–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
restart_container() {
    docker stop "$CONTAINER_NAME" &>/dev/null
    docker rm "$CONTAINER_NAME" &>/dev/null
    docker run -d \
        --name "$CONTAINER_NAME" \
        --restart=always \
        --network host \
        -v "$CONFIG_FILE:/etc/xray/config.json" \
        teddysun/xray
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
add_user() {
    local username=$1
    local uuid=$(uuidgen)
    local config=$(cat "$CONFIG_FILE")
    local users=$(cat "$USERS_FILE")
    local ipv6=$(get_ipv6)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ users.json
    users=$(echo "$users" | jq --arg u "$username" --arg id "$uuid" '. + {($u): $id}')
    echo "$users" > "$USERS_FILE"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ Xray
    config=$(echo "$config" | jq \
        --arg id "$uuid" \
        '.inbounds[0].settings.clients += [{"id": $id, "flow": "xtls-rprx-vision"}]')
    
    echo "$config" > "$CONFIG_FILE"
    restart_container

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    local reality_settings=$(echo "$config" | jq '.inbounds[0].streamSettings.realitySettings')
    local private_key=$(echo "$reality_settings" | jq -r '.privateKey')
    local public_key=$(docker run --rm teddysun/xray xray x25519 -i "$private_key" | awk '/Public key:/ {print $3}')
    local short_id=$(echo "$reality_settings" | jq -r '.shortIds[0]')
    
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username –¥–æ–±–∞–≤–ª–µ–Ω"
    echo "üîó VLESS-—Å—Å—ã–ª–∫–∞:"
    echo "vless://$uuid@[$ipv6]:443?security=reality&encryption=none&alpn=h2,http/1.1&headerType=none&fp=chrome&type=tcp&flow=xtls-rprx-vision&sni=www.google.com&pbk=$public_key&sid=$short_id#$username"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
remove_user() {
    local username=$1
    local users=$(cat "$USERS_FILE")
    local user_id=$(echo "$users" | jq -r ".[\"$username\"]")
    
    if [[ -z "$user_id" || "$user_id" == "null" ]]; then
        echo "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ users.json
    users=$(echo "$users" | jq "del(.[\"$username\"])")
    echo "$users" > "$USERS_FILE"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ Xray
    local config=$(cat "$CONFIG_FILE")
    config=$(echo "$config" | jq \
        --arg id "$user_id" \
        '.inbounds[0].settings.clients |= map(select(.id != $id))')
    
    echo "$config" > "$CONFIG_FILE"
    restart_container
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username —É–¥–∞–ª—ë–Ω"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
check_dependencies
init_config

case $1 in
    add)
        [[ -z "$2" ]] && { echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 add <username>"; exit 1; }
        add_user "$2"
        ;;
    remove)
        [[ -z "$2" ]] && { echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 remove <username>"; exit 1; }
        remove_user "$2"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
        echo "  $0 add <username>    - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        echo "  $0 remove <username> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        exit 1
        ;;
esac